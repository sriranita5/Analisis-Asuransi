# -*- coding: utf-8 -*-
"""Kelompok J

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a7BkOTcHl9jJSZdwy_O6wlf9VRT76H4O

# **KELOMPOK J**

    1. Sri Ranita                     162112133003
    2. Ghifary Abrar Rabbani          162112133013
    3. Sukma Sekar Devita             162112133015
    4. I Ketut Andika Wisnu Danuarta  162112133115

## **Import Packages**

Import packages and classes yang dibutuhkan untuk multiple linear regression.
"""

import io
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from scipy import stats
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from google.colab import files

"""## **Load Medical Cost Personal Datasets**"""

# Mengunggah File CSV ke Dalam Google Colab
uploaded = files.upload()

# Import dataset into a dataframe
data = pd.read_csv(io.BytesIO(uploaded['insurance.csv']))
print(data)

"""##**Medical Cost Personal Datasets**

Dataset ini berisikan biaya medis asuransi untuk setiap individu dengan berbagai variabel prediktor yang berbeda. Data ini dapat diakses di *Kaggle* dengan link: https://www.kaggle.com/datasets/mirichoi0218/insurance

Dataset ini terdiri dari 1338 observasi dan 7 variabel. Tujuan dari analisis ini adalah untuk mengetahui apakah BMI dan apakah seorang individu merokok/tidak berpengaruh terhadap besar kecilnya biaya medis. Variabel prediktor itu sendiri adalah BMI(X1) dan Merokok(X2) dan variabel responnya adalah biaya medis(y).
"""

# Menampilkan 5 baris pertama dari dataset
data.head()

# Isi variabel dari dataset
print(data.keys())

"""##**Data Preprocessing**"""

# Memeriksa apakah ada missing value
data.isnull().sum()
data.info()

"""### **Membuat Variabel Dummy**"""

dummy = pd.get_dummies(data['smoker'],drop_first=True)
dummy.head()

"""### **Menambahkan Kolom Variabel Dummy ke dalam DataFrame dari Dataset**"""

df = pd.DataFrame(data)

# Using 'dum_smoker' as the column name
data2 = df.assign(dum_smoker = dummy)
   
# Observe the result
data2

"""### **Remove the Smoker Column**"""

# Examine the shape of the DataFrame
print(data2.shape)

# Drop the 'smoker' column
data2.drop(['smoker'], axis='columns', inplace=True)

# Examine the shape of the DataFrame (again)
print(data2.shape)

# DataFrame after removing the 'smoker' column
data2.head()

"""##**Parameter Regresi**"""

x = data2[['bmi', 'dum_smoker']]
y = data2['charges']

# summary
X = sm.add_constant(x)
hasil = sm.OLS(y, X).fit()
print(hasil.summary())

"""###**Persamaan regresi**

$\hat{Y} = -3459.0955+388.0152 X_1+2.359 X_2$

ATAU

$\hat{Y} = -3459.0955+388.0152 bmi+2.359smoker$

##**Uji Serentak**
$H_{0}: \beta_{1} = \beta_{2} = 0$

$H_{1}$: minimal ada satu $\beta_{i}  \neq 0$, $i=1,2$
"""

print('F-hitung\t= ', hasil.fvalue) # F-hitung
print('P-value\t\t= ', hasil.f_pvalue) # P-value

alpha = 0.05

#Daerah penolakan dan keputusan
if hasil.f_pvalue > alpha:
	print('Gagal Tolak H0 artinya tidak ada relasi linier antara Y (charges) dan X')
else:
	print('Tolak H0 sehingga terdapat relasi linier antara Y (charges) dan X')

"""Sehingga dapat disimpulkan bahwa variabel smoker dan variabel BMI (ketika digabungkan) berpengaruh terhadap biaya medis individu.

##**Uji Parsial**
Untuk $\beta_{1}$   --------------  Untuk $\beta_{2}$

$H_{0}: \beta_{1} = 0$ ------  $H_{0}: \beta_{2} = 0$

$H_{1}: \beta_{1} \neq 0$ ------  $H_{1}: \beta_{2} \neq 0$
"""

print('t-hitung =', hasil.tvalues) # t-hitung
print()
print('P-value =', hasil.pvalues) # P-value

"""Alpha = 0.05

Dikarenakan p-value dari kedua parameter lebih besar dari alpha (0.5), maka dapat diputuskan Tolak H0, yang berarti variabel prediktor berpengaruh secara signifikan terhadap variabel respons.

Maka, dapat disimpulkan bahwa terdapat relasi linier antara Y (charges) dengan X (bmi) serta Y (charges) dengan X (smoker).

##**Nilai Koefisien Determinasi (R-Squared) dan Adjusted R-Squared**
"""

print('R2 \t\t= ', hasil.rsquared)
print('Adjusted R2 \t= ', hasil.rsquared_adj)

"""Nilai  𝑅2  dan adjusted  𝑅2  cukup baik / lebih tinggi apabila dibandingkan 𝑅2 pada model regresi linier yang memodelkan Y (charges) dengan X (bmi dan smoker).

##**Pengujian Asumsi**

### **Linieritas antara Y (charges) dan X (bmi, smoker)**
"""

plt.figure(figsize=(30, 10))

predictors = ['bmi', 'dum_smoker']
response = data2['charges']

for i, col in enumerate(predictors):
    plt.subplot(1, len(predictors) , i+1)
    x = data2[col]
    y = response
    plt.scatter(x, y, marker='o', color='darkblue')
    plt.title(col)
    plt.xlabel(col)
    plt.ylabel('charges')

"""Berdasarkan plot diatas, terlihat bahwa :

*   BMI lumayan menyebar apabila dibandingkan dengan charges. Dapat disimpulkan bahwa BMI tidak terlalu berpengaruh terhadap charges, karena baik semakin kecil BMI ataupun semakin besar, penyebaran datanya juga berbeda-beda. Akan tetapi, untuk BMI di rentang 0-30, terlihat bahwa pengaruh bmi terhadap charges terlihat serupa/mirip.
*   Untuk smoker dapat disimpulkan bahwa semakin dia merokok, maka semakin besar charges biaya medisnya. Sebaliknya, apabila dia tidak merokok, maka besar charges biaya medisnya semakin kecil.

### **Multikolinieritas pada variabel independen**
"""

from patsy import dmatrices
from statsmodels.stats.outliers_influence import variance_inflation_factor

vif_x = data2[["bmi", "dum_smoker"]]

# VIF dataframe
vif_data = pd.DataFrame()
vif_data["feature"] = vif_x.columns
  
# calculating VIF for each feature
vif_data["VIF"] = [variance_inflation_factor(vif_x.values, i)
                          for i in range(len(vif_x.columns))]
  
print(vif_data)

"""Didapatkan VIF kedua variabel independen < 10, maka dapat disimpulkan **tidak ada kasus multikolinieritas** antar variabel independen.

Note:

Apabila di kasus lain terjadi multikolinieritas pada variabel independennya, maka langkah yang dapat dilakukan adalah mengganti atau menghapus variabel yang memiliki VIF tinggi, dan/atau menambah jumlah observasi.

### **Autokorelasi pada residual**
"""

# residuals model regresi linier berganda
residual = hasil.resid

# membuat plot residuals vs time order

# membuat list time order
time1 = list(range(1,1338+1))
print(time1)

plt.scatter(x=time1, y=residual)
plt.xlabel('time order', fontsize=12)
plt.ylabel('residuals', fontsize=12)
plt.show()

"""Berdasarkan plot diatas, dapat disimpulkan bahwa titik-titik membentuk pita horizontal di sekitar nol. Sehingga dapat disimpulkan bahwa **tidak ada abnormal** atau kelainan yang terdapat di plot tersebut. Akan tetapi, memang ada sedikit outlier pada data.

### **Heterokedastisitas pada residual**
"""

# membuat plot residuals vs fitted value

plt.scatter(x=hasil.fittedvalues, y=residual)
plt.xlabel('fitted value', fontsize=12)
plt.ylabel('residuals', fontsize=12)
plt.show()

"""Terlihat pada grafik scatter di atas, bahwa terdapat pola tertentu yakni titik-titik melebar, menyempit, kemudian melebar kembali. Maka, dapat disimpulkan bahwa terdapat gejala heteroskedastisitas pada data.

Dengan demikian, untuk membuktikannya lebih lanjut diperlukan uji heteroskedasitisitas yang lebih lanjut, seperti Uji Glejser, Uji Park, dan Uji Spearman.

### **Normalitas Untuk Error**
"""

from scipy.stats import kstest

# uji normalitas dengan kolmogorov-smirnov test
ks1=kstest(residual,'norm')
print('Statistic KS\t:', ks1.statistic.round(4))
print('P-value\t\t:', ks1.pvalue.round(4))

# interpret
alpha = 0.05
if ks1.pvalue > alpha:
	print('Data Berdistribusi Normal (Gagal Tolak H0)')
else:
	print('Data Tidak Berdistribusi Normal (Tolak H0)')